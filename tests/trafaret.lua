local assert = require('luassert')
local busted = require('busted')
local test = busted.test
local describe = busted.describe

local T = require("modules/trafaret")

describe("trafaret: atom", function()
    local number = T.Atom{1}
    local str = T.Atom{"x"}
    test("validate number", function()
        assert(T.validate(number, 1))
    end)
    test("validate wrong number", function()
        assert(not T.validate(number, 2))
        assert(not T.validate(number, '1'))
    end)
    test("validate string", function()
        assert(T.validate(str, 'x'))
    end)
    test("validate wrong string", function()
        assert(not T.validate(str, 2))
        assert(not T.validate(str, 'xx'))
        assert(not T.validate(str, 'y'))
    end)
end)

describe("trafaret: number", function()
    local number = T.Number{}
    test("validate num", function()
        assert(T.validate(number, 1))
    end)
    test("validate string", function()
        local res, val, err = T.validate(number, "hello")
        assert(not res)
        assert.is.same(val, nil)
        assert.is.same(err, {": Value is not a number, but string"})
    end)
    test("validate table", function()
        local res, val, err = T.validate(number, {})
        assert(not res)
        assert.is.same(val, nil)
        assert.is.same(err, {": Value is not a number, but table"})
    end)
end)

describe("trafaret: bool", function()
    local bool = T.Bool{}
    test("validate bool", function()
        assert(T.validate(bool, true))
        assert(T.validate(bool, false))
    end)
    test("validate number", function()
        local res, val, err = T.validate(bool, 0)
        assert(not res)
        assert.is.same(val, true)
        assert.is.same(err, {": Value is not a boolean, but number"})
    end)
    test("validate empty string", function()
        local res, val, err = T.validate(bool, "")
        assert(not res)
        assert.is.same(val, true)
        assert.is.same(err, {": Value is not a boolean, but string"})
    end)
    test("validate string", function()
        local res, val, err = T.validate(bool, "hello")
        assert(not res)
        assert.is.same(val, true)
        assert.is.same(err, {": Value is not a boolean, but string"})
    end)
    test("validate table", function()
        local res, val, err = T.validate(bool, {})
        assert(not res)
        assert.is.same(val, true)
        assert.is.same(err, {": Value is not a boolean, but table"})
    end)
end)

describe("trafaret: string", function()
    local str = T.String{}
    local ver = T.String{pattern="^v%d"}
    test("validate str", function()
        assert(T.validate(str, "xxx"))
        assert(T.validate(str, "111"))
    end)
    test("validate number", function()
        local res, val, err = T.validate(str, 123)
        assert(not res)
        assert.is.same(val, "123")
        assert.is.same(err, {": Value is not a string, but number"})
    end)
    test("validate table", function()
        local res, _, err = T.validate(str, {})
        assert(not res)
        assert.is.same(err, {": Value is not a string, but table"})
    end)
    test("validate ver", function()
        assert(T.validate(ver, "v1"))
        assert(T.validate(ver, "v1.2.3"))
        assert(T.validate(ver, "v1.2.3"))
        assert(not T.validate(ver, "1.2.3"))
        assert(not T.validate(ver, "xxx"))
        assert(not T.validate(ver, "vvv"))
    end)
end)

describe("trafaret: string", function()
    local str = T.String{}
    test("validate str", function()
        assert(T.validate(str, "xxx"))
        assert(T.validate(str, "111"))
    end)
    test("validate number", function()
        local res, val, err = T.validate(str, 123)
        assert(not res)
        assert.is.same(val, "123")
        assert.is.same(err, {": Value is not a string, but number"})
    end)
    test("validate table", function()
        local res, _, err = T.validate(str, {})
        assert(not res)
        assert.is.same(err, {": Value is not a string, but table"})
    end)
end)

describe("trafaret: dict", function()
    local fixed = T.Dict {
        [T.Key{"xxx"}] = T.Number{},
        yyy = T.Number{},
    }
    local extra = T.Dict {allow_extra=true}
    local default = T.Dict {
        [T.Key{"xxx", default=1}] = T.Number{},
    }
    local optional = T.Dict {
        [T.Key{"xxx", optional=true}] = T.Number{},
        yyy = T.Number{},
    }
    test("fixed ok", function()
        local res, val, _ = T.validate(fixed, {xxx=1, yyy=2})
        assert(res)
        assert.is.same(val, {yyy=2, xxx=1})
    end)
    test("fixed missing", function()
        local res, _, _ = T.validate(fixed, {xxx=1})
        assert(not res)
    end)
    test("fixed extra", function()
        local res, _, _ = T.validate(fixed, {xxx=1, yyy=3, zzz=4})
        assert(not res)
    end)
    test("fixed wrong type", function()
        local res, _, _ = T.validate(fixed, {xxx="1", yyy=2})
        assert(not res)
    end)
    test("default exits", function()
        local res, val, _ = T.validate(default, {xxx=3})
        assert(res)
        assert.is.same({xxx=3}, val)
    end)
    test("default not exists", function()
        local res, val, _ = T.validate(default, {})
        assert(res)
        assert.is.same({xxx=1}, val)
    end)
    test("default wrong type", function()
        local res, val, _ = T.validate(default, {xxx="3"})
        assert(not res)
        assert.is.same({xxx=3}, val)
    end)
    test("allow_extra", function()
        local res, val, _ = T.validate(extra, {xxx="1", yyy=2})
        assert(res)
        assert.is.same({xxx="1", yyy=2}, val)
    end)
    test("optional present", function()
        local res, val, _ = T.validate(optional, {xxx=1, yyy=2})
        assert(res)
        assert.is.same(val, {yyy=2, xxx=1})
    end)
    test("optional absent", function()
        local res, val, err = T.validate(optional, {yyy=2})
        assert.is.same(err, nil)
        assert(res)
        assert.is.same(val, {yyy=2})
    end)
end)

describe("trafaret: list", function()
    local lst = T.List { T.Number{} }
    test("empty", function()
        local res, val, _ = T.validate(lst, {})
        assert(res)
        assert.is.same(val, {})
    end)
    test("normal", function()
        local res, val, _ = T.validate(lst, {1, 2, 3})
        assert(res)
        assert.is.same(val, {1, 2, 3})
    end)
    test("bad", function()
        local res, val, _ = T.validate(lst, {1, "2", 3})
        assert(not res)
        assert.is.same(val, {1, 2, 3})
    end)
end)

describe("trafaret: map", function()
    local map = T.Map { T.String{}, T.Number{} }
    test("empty", function()
        local res, val, _ = T.validate(map, {})
        assert(res)
        assert.is.same(val, {})
    end)
    test("normal", function()
        local res, val, _ = T.validate(map, {a=1, b=2})
        assert(res)
        assert.is.same(val, {a=1, b=2})
    end)
    test("bad", function()
        local res, val, _ = T.validate(map, {a="1", b="b", c=3})
        assert(not res)
        assert.is.same(val, {a=1, c=3})  --- b=nil skipped
    end)
end)

describe("trafaret: or", function()
    local alt = T.Or { T.String{}, T.Number{} }
    test("string", function()
        local res, val, _ = T.validate(alt, "x")
        assert(res)
        assert.is.same(val, "x")
    end)
    test("number", function()
        local res, val, _ = T.validate(alt, 1)
        assert(res)
        assert.is.same(val, 1)
    end)
    test("table", function()
        local res, val, err = T.validate(alt, {x=1})
        assert(not res)
        assert.is.same(val, {x=1})
        assert.is.same(err, {
            ".<alternative 1>: Value is not a string, but table",
            ".<alternative 2>: Value is not a number, but table",
        })
    end)
end)

describe("trafaret: choice", function()
    local choice = T.Choice {
        "key",
        str=T.Dict {
            key=T.Atom {"str"},
            value=T.String{},
        },
        num=T.Dict {
            key=T.Atom {"num"},
            value=T.Number{},
        },
    }
    test("choice_ok_string", function()
        local res, val, _ = T.validate(choice, {key="str", value="1"})
        assert(res)
        assert.is.same(val, {key="str", value="1"})
    end)
    test("choice_ok_number", function()
        local res, val, _ = T.validate(choice, {key="num", value=1})
        assert(res)
        assert.is.same(val, {key="num", value=1})
    end)
    test("choice_err_string", function()
        local res, _, err = T.validate(choice, {key="str", value=1})
        assert(not res)
        assert.is.same(err, {
            "<choice str>.value: Value is not a string, but number",
        })
    end)
    test("choice_err_number", function()
        local res, _, err = T.validate(choice, {key="num", value="1"})
        assert(not res)
        assert.is.same(err, {
            "<choice num>.value: Value is not a number, but string",
        })
    end)
    test("wrong_choice", function()
        local res, _, err = T.validate(choice, {key="nothing", value="1"})
        assert(not res)
        assert.is.same(#err, 1)
        assert(
            err[1] == ": Key key must be one of str, num" or
            err[1] == ": Key key must be one of num, str")

    end)
    test("no_selector", function()
        local res, _, err = T.validate(choice, {})
        assert(not res)
        assert.is.same(err, {
            ": Dict must contain key",
        })
    end)
end)
